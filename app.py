
import streamlit as st
import pandas as pd
import pickle
import subprocess
import sys

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Triagem Interativa - Risco Card√≠aco", layout="wide")

# --- FUN√á√ÉO DE TREINAMENTO ---
def train_model():
    with st.spinner('Iniciando o processo de treinamento...'):
        process = subprocess.Popen(
            [sys.executable, "train_model.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Exibir logs em tempo real
        st_stdout = st.empty()
        st_stderr = st.empty()
        
        while process.poll() is None:
            st_stdout.text(f"stdout: {process.stdout.readline()}")
            st_stderr.text(f"stderr: {process.stderr.readline()}")
        
        # Capturar o restante da sa√≠da
        stdout, stderr = process.communicate()
        st_stdout.text(f"stdout: {stdout}")
        st_stderr.text(f"stderr: {stderr}")

        if process.returncode == 0:
            st.success("Modelo treinado com sucesso!")
        else:
            st.error("O treinamento do modelo falhou.")


# --- CARREGAMENTO DOS ARTEFATOS ---
@st.cache_resource
def load_artifacts():
    try:
        with open('artifacts/best_model.pkl', 'rb') as f:
            model = pickle.load(f)
        with open('artifacts/scaler.pkl', 'rb') as f:
            scaler = pickle.load(f)
        with open('artifacts/label_encoders.pkl', 'rb') as f:
            label_encoders = pickle.load(f)
        with open('artifacts/feature_names.pkl', 'rb') as f:
            feature_names = pickle.load(f)
        return model, scaler, label_encoders, feature_names
    except FileNotFoundError:
        st.error("Artefatos do modelo n√£o encontrados. Treine o modelo primeiro.")
        return None, None, None, None


model, scaler, label_encoders, feature_names = load_artifacts()

# --- FUN√á√ÉO DE PREDI√á√ÉO ---
def predict_heart_attack_risk(patient_data, model, scaler, label_encoders, feature_names):
    patient_df = pd.DataFrame([patient_data])
    # Flag de aus√™ncia do consumo de √°lcool, replicando o notebook.
    if 'alcohol_consumption' in patient_df:
        patient_df['alcohol_missing'] = patient_df['alcohol_consumption'].isnull().astype(int)
    else:
        patient_df['alcohol_missing'] = 0

    for col, encoder in label_encoders.items():
        if col in patient_df.columns:
            # Safely transform data, handling unseen labels
            patient_df[col] = patient_df[col].astype(str).apply(lambda x: x if x in encoder.classes_ else encoder.classes_[0])
            patient_df[col] = encoder.transform(patient_df[col].astype(str))
    
    patient_df = patient_df.reindex(columns=feature_names, fill_value=0)
    patient_scaled = scaler.transform(patient_df)
    
    prediction = model.predict(patient_scaled)[0]
    probability = model.predict_proba(patient_scaled)[0]
    
    return {
        'prediction': int(prediction),
        'risk_label': 'ALTO RISCO' if prediction == 1 else 'BAIXO RISCO',
        'probability_no_attack': probability[0] * 100,
        'probability_attack': probability[1] * 100
    }

# --- INTERFACE DO STREAMLIT ---
st.title('ü©∫ Formul√°rio de Triagem para Risco de Ataque Card√≠aco')
st.markdown("---")

# Coletar dados do paciente em abas
patient_data = {}
new_patient_data = {}

main_tabs = st.tabs(["**Triagem de Risco**", "**Cadastrar Novo Paciente**", "**Treinar Modelo**"])

with main_tabs[0]:
    st.header("Formul√°rio de Triagem")
    pred_tab1, pred_tab2, pred_tab3 = st.tabs([
        "**Informa√ß√µes do Paciente**", 
        "**Hist√≥rico e H√°bitos**", 
        "**Exames Laboratoriais**"
    ])

    with pred_tab1:
        st.header("Dados Demogr√°ficos e Condi√ß√µes Gerais")
        col1, col2, col3 = st.columns(3)
        with col1:
            patient_data['age'] = st.number_input('Idade', min_value=1, max_value=120, value=50, key='age_predict')
            patient_data['gender'] = st.selectbox('G√™nero', ['Male', 'Female'], help="Selecione o g√™nero do paciente.", key='gender_predict')
            patient_data['region'] = st.selectbox('Regi√£o', ['Urban', 'Rural'], key='region_predict')
        with col2:
            patient_data['income_level'] = st.selectbox('N√≠vel de Renda', ['Low', 'Middle', 'High'], key='income_predict')
            patient_data['hypertension'] = st.selectbox('Hipertens√£o', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='hyper_predict')
            patient_data['diabetes'] = st.selectbox('Diabetes', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='diab_predict')
        with col3:
            patient_data['obesity'] = st.selectbox('Obesidade', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='obesity_predict')
            patient_data['waist_circumference'] = st.number_input('Circunfer√™ncia da Cintura (cm)', min_value=50, max_value=200, value=90, key='waist_predict')

    with pred_tab2:
        st.header("Estilo de Vida e Hist√≥rico M√©dico")
        col1, col2, col3 = st.columns(3)
        with col1:
            patient_data['family_history'] = st.selectbox('Hist√≥rico Familiar de Doen√ßa Card√≠aca', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='family_predict')
            patient_data['smoking_status'] = st.selectbox('Status de Fumante', ['Never', 'Past', 'Current'], key='smoking_predict')
            patient_data['alcohol_consumption'] = st.selectbox('Consumo de √Ålcool', ['Never', 'Moderate', 'High'], key='alcohol_predict')
        with col2:
            patient_data['physical_activity'] = st.selectbox('N√≠vel de Atividade F√≠sica', ['Low', 'Moderate', 'High'], key='phys_predict')
            patient_data['dietary_habits'] = st.selectbox('H√°bitos Alimentares', ['Healthy', 'Unhealthy'], key='diet_predict')
            patient_data['stress_level'] = st.selectbox('N√≠vel de Estresse Percebido', ['Low', 'Moderate', 'High'], key='stress_predict')
        with col3:
            patient_data['sleep_hours'] = st.slider('M√©dia de Horas de Sono', min_value=1.0, max_value=12.0, value=7.0, step=0.5, key='sleep_predict')
            patient_data['air_pollution_exposure'] = st.selectbox('Exposi√ß√£o √† Polui√ß√£o do Ar', ['Low', 'Moderate', 'High'], key='air_predict')
            patient_data['medication_usage'] = st.selectbox('Uso de Medica√ß√£o para Cora√ß√£o', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='med_predict')

    with pred_tab3:
        st.header("Resultados de Exames")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.subheader("Press√£o Arterial")
            patient_data['blood_pressure_systolic'] = st.number_input('Sist√≥lica (mmHg)', min_value=80, max_value=250, value=120, key='bps_predict')
            patient_data['blood_pressure_diastolic'] = st.number_input('Diast√≥lica (mmHg)', min_value=40, max_value=150, value=80, key='bpd_predict')
            st.subheader("Glicemia")
            patient_data['fasting_blood_sugar'] = st.number_input('A√ß√∫car no Sangue em Jejum (mg/dL)', min_value=50, max_value=300, value=100, key='fbs_predict')
        with col2:
            st.subheader("Colesterol (mg/dL)")
            patient_data['cholesterol_level'] = st.number_input('N√≠vel Total', min_value=50, max_value=500, value=200, key='chol_predict')
            patient_data['cholesterol_hdl'] = st.number_input('HDL', min_value=10, max_value=150, value=50, key='hdl_predict')
            patient_data['cholesterol_ldl'] = st.number_input('LDL', min_value=30, max_value=300, value=130, key='ldl_predict')
            patient_data['triglycerides'] = st.number_input('Triglicer√≠deos', min_value=30, max_value=500, value=150, key='trig_predict')
        with col3:
            st.subheader("Outros Exames")
            patient_data['EKG_results'] = st.selectbox('Resultados de EKG', ['Normal', 'Abnormal'], key='ekg_predict')
            patient_data['previous_heart_disease'] = st.selectbox('Doen√ßa Card√≠aca Pr√©via Diagnosticada', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='prev_predict')
            patient_data['participated_in_free_screening'] = st.selectbox('Participou de Triagem Gratuita', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='screen_predict')

    # --- BOT√ÉO E RESULTADO DA PREDI√á√ÉO ---
    st.markdown("---")
    col1, col2, col3 = st.columns([2, 3, 2])

    with col2:
        if st.button('**ü©∫ Analisar Risco Card√≠aco**', use_container_width=True):
            if None in (model, scaler, label_encoders, feature_names):
                st.error("‚ö†Ô∏è Artefatos n√£o carregados. Treine o modelo antes de realizar predi√ß√µes.")
            else:
                with st.spinner('Avaliando dados e calculando o risco...'):
                    resultado = predict_heart_attack_risk(patient_data, model, scaler, label_encoders, feature_names)
                st.subheader('Resultado da An√°lise de Risco')

                if resultado['prediction'] == 1:
                    st.error(f"**Classifica√ß√£o: {resultado['risk_label']}**", icon="üíî")
                else:
                    st.success(f"**Classifica√ß√£o: {resultado['risk_label']}**", icon="‚ù§Ô∏è")

                prob_df = pd.DataFrame({
                    'Categoria': ['Risco de Ataque Card√≠aco', 'Sem Risco Iminente'],
                    'Probabilidade (%)': [resultado['probability_attack'], resultado['probability_no_attack']]
                })
                st.bar_chart(prob_df.set_index('Categoria'))

                st.info(f"**Probabilidade de TER um ataque card√≠aco:** {resultado['probability_attack']:.2f}%")
                st.info(f"**Probabilidade de N√ÉO ter um ataque card√≠aco:** {resultado['probability_no_attack']:.2f}%")

with main_tabs[1]:
    st.header("Formul√°rio de Cadastro de Paciente")
    
    @st.cache_data
    def get_csv_columns():
        return pd.read_csv('dataset/heart_attack_prediction_indonesia.csv', nrows=0).columns.tolist()

    csv_columns = get_csv_columns()

    reg_tab1, reg_tab2, reg_tab3 = st.tabs([
        "**Informa√ß√µes do Paciente**", 
        "**Hist√≥rico e H√°bitos**", 
        "**Exames Laboratoriais e Desfecho**"
    ])

    with reg_tab1:
        st.header("Dados Demogr√°ficos e Condi√ß√µes Gerais")
        col1, col2, col3 = st.columns(3)
        with col1:
            new_patient_data['age'] = st.number_input('Idade', min_value=1, max_value=120, value=50, key='age_reg')
            new_patient_data['gender'] = st.selectbox('G√™nero', ['Male', 'Female'], help="Selecione o g√™nero do paciente.", key='gender_reg')
            new_patient_data['region'] = st.selectbox('Regi√£o', ['Urban', 'Rural'], key='region_reg')
        with col2:
            new_patient_data['income_level'] = st.selectbox('N√≠vel de Renda', ['Low', 'Middle', 'High'], key='income_reg')
            new_patient_data['hypertension'] = st.selectbox('Hipertens√£o', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='hyper_reg')
            new_patient_data['diabetes'] = st.selectbox('Diabetes', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='diab_reg')
        with col3:
            new_patient_data['obesity'] = st.selectbox('Obesidade', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='obesity_reg')
            new_patient_data['waist_circumference'] = st.number_input('Circunfer√™ncia da Cintura (cm)', min_value=50, max_value=200, value=90, key='waist_reg')

    with reg_tab2:
        st.header("Estilo de Vida e Hist√≥rico M√©dico")
        col1, col2, col3 = st.columns(3)
        with col1:
            new_patient_data['family_history'] = st.selectbox('Hist√≥rico Familiar de Doen√ßa Card√≠aca', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='family_reg')
            new_patient_data['smoking_status'] = st.selectbox('Status de Fumante', ['Never', 'Past', 'Current'], key='smoking_reg')
            new_patient_data['alcohol_consumption'] = st.selectbox('Consumo de √Ålcool', ['Never', 'Moderate', 'High'], key='alcohol_reg')
        with col2:
            new_patient_data['physical_activity'] = st.selectbox('N√≠vel de Atividade F√≠sica', ['Low', 'Moderate', 'High'], key='phys_reg')
            new_patient_data['dietary_habits'] = st.selectbox('H√°bitos Alimentares', ['Healthy', 'Unhealthy'], key='diet_reg')
            new_patient_data['stress_level'] = st.selectbox('N√≠vel de Estresse Percebido', ['Low', 'Moderate', 'High'], key='stress_reg')
        with col3:
            new_patient_data['sleep_hours'] = st.slider('M√©dia de Horas de Sono', min_value=1.0, max_value=12.0, value=7.0, step=0.5, key='sleep_reg')
            new_patient_data['air_pollution_exposure'] = st.selectbox('Exposi√ß√£o √† Polui√ß√£o do Ar', ['Low', 'Moderate', 'High'], key='air_reg')
            new_patient_data['medication_usage'] = st.selectbox('Uso de Medica√ß√£o para Cora√ß√£o', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='med_reg')

    with reg_tab3:
        st.header("Resultados de Exames e Desfecho Cl√≠nico")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.subheader("Press√£o Arterial")
            new_patient_data['blood_pressure_systolic'] = st.number_input('Sist√≥lica (mmHg)', min_value=80, max_value=250, value=120, key='bps_reg')
            new_patient_data['blood_pressure_diastolic'] = st.number_input('Diast√≥lica (mmHg)', min_value=40, max_value=150, value=80, key='bpd_reg')
            st.subheader("Glicemia")
            new_patient_data['fasting_blood_sugar'] = st.number_input('A√ß√∫car no Sangue em Jejum (mg/dL)', min_value=50, max_value=300, value=100, key='fbs_reg')
        with col2:
            st.subheader("Colesterol (mg/dL)")
            new_patient_data['cholesterol_level'] = st.number_input('N√≠vel Total', min_value=50, max_value=500, value=200, key='chol_reg')
            new_patient_data['cholesterol_hdl'] = st.number_input('HDL', min_value=10, max_value=150, value=50, key='hdl_reg')
            new_patient_data['cholesterol_ldl'] = st.number_input('LDL', min_value=30, max_value=300, value=130, key='ldl_reg')
            new_patient_data['triglycerides'] = st.number_input('Triglicer√≠deos', min_value=30, max_value=500, value=150, key='trig_reg')
        with col3:
            st.subheader("Outros Exames e Desfecho")
            new_patient_data['EKG_results'] = st.selectbox('Resultados de EKG', ['Normal', 'Abnormal'], key='ekg_reg')
            new_patient_data['previous_heart_disease'] = st.selectbox('Doen√ßa Card√≠aca Pr√©via Diagnosticada', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='prev_reg')
            new_patient_data['participated_in_free_screening'] = st.selectbox('Participou de Triagem Gratuita', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='screen_reg')
            new_patient_data['heart_attack'] = st.selectbox('Ocorr√™ncia de Ataque Card√≠aco (Desfecho)', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o', key='attack_reg')

    # --- BOT√ÉO PARA SALVAR NOVOS DADOS ---
    st.markdown("---")
    col1, col2, col3 = st.columns([2, 3, 2])
    with col2:
        if st.button('**üíæ Salvar Dados do Novo Paciente**', use_container_width=True):
            try:
                new_patient_df = pd.DataFrame([new_patient_data])
                new_patient_df = new_patient_df[csv_columns]
                new_patient_df.to_csv('dataset/heart_attack_prediction_indonesia.csv', mode='a', header=False, index=False)
                st.success("‚úÖ Dados do novo paciente salvos com sucesso!")
                st.balloons()
            except Exception as e:
                st.error(f"‚ùå Ocorreu um erro ao salvar os dados: {e}")

with main_tabs[2]:
    st.header("Treinamento do Modelo")
    st.info("Clique no bot√£o abaixo para iniciar um novo treinamento do modelo com os dados mais recentes do dataset.")
    
    col1, col2, col3 = st.columns([2, 3, 2])
    with col2:
        if st.button("**üöÄ Iniciar Treinamento do Modelo**", use_container_width=True):
            try:
                train_model()
                st.success("‚úÖ Modelo treinado e artefatos atualizados com sucesso!")
                st.warning("A aplica√ß√£o ser√° recarregada para usar o novo modelo.")
                # Limpa o cache para for√ßar o reload dos artefatos
                st.cache_resource.clear()
                # For√ßa o recarregamento da p√°gina
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå Ocorreu um erro durante o treinamento: {e}")


# --- RODAP√â ---
st.markdown("---")
st.warning(
    "**Aviso Legal:** Esta √© uma ferramenta de triagem baseada em um modelo de Machine Learning "
    "e n√£o substitui, de forma alguma, a consulta, o diagn√≥stico ou o tratamento m√©dico profissional. "
    "Consulte sempre um m√©dico qualificado para quest√µes de sa√∫de."
)
